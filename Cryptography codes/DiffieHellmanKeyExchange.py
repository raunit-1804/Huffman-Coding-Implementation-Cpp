import random
import os
import sys
sys.setrecursionlimit(10**7)


def generate_prime_number(prime_bit_length='1024'):
    command_line_key = os.popen('openssl prime -generate -bits ' + prime_bit_length).readlines()
    return int(command_line_key[0].rstrip('\n'))


def fast_exponentiation(a, b, n):
    if b == 0:
        return 1 if a else 0
    temp = fast_exponentiation(a, b // 2, n)
    return ((temp * temp) % n * a) % n if b & 1 else (temp * temp) % n


if __name__ == '__main__':
    num_bits = input("Enter the number of bits of the prime number to be generated(default=1024): ")
    p = generate_prime_number(prime_bit_length=num_bits)
    alpha = random.randint(2, p // 2 - 1)
    print("DOMAIN PARAMETERS:\nAlpha: {}\tP: {}".format(alpha, p))
    a, b = random.randint(2, p - 2), random.randint(2, p - 2)  # Always choose from the Cyclic group Z*(p) : [2, p - 2]
    public_key_A, public_key_B = fast_exponentiation(alpha, a, p), fast_exponentiation(alpha, b, p)
    private_key_A, private_key_B = fast_exponentiation(public_key_B, a, p), fast_exponentiation(public_key_A, b, p)
    print("PROOF OF CORRECTNESS:\nPrivate key generated by A: {}\nPrivate key generated by B: {}".format(private_key_A,
                                                                                                         private_key_B))
    print("Difference: {}".format(private_key_B - private_key_A))
    print("PUBLIC KEYS:\nA: {}\tB: {}".format(public_key_A, public_key_B))
    print("PRIVATE KEY:\n{}".format(private_key_A))
